name: Deploy Linux Container
env:
  DOCKER_REPOSITORY: stuartshay/navigator-attractions-api
  DOCKER_REPOSITORY_IMAGE: stuartshay/navigator-attractions-api
  DOCKER_IMAGE_TAG: 7.0.1.${{ github.run_number }}
  BUILD_NUMBER: ${{ github.run_number }}
  DOCKER_FILE: src/NavigatorAttractions.WebAPI/Dockerfile
  BRANCH_NAME: '${{ github.ref_name }}'
  GCP_DOCKER_IMAGE: us-east4-docker.pkg.dev/velvety-byway-327718/navigator/navigator-attractions-api
  ARTIFACT_REGISTRY_HOST: us-east4-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: navigator-attractions-api
  REGION: us-east4
  ASPNETCORE_ENVIRONMENT: CloudRun

on:
  workflow_dispatch:

  push:
    paths:
      - 'src/**'
      - 'test/**'
    branches:
      - master

jobs:
  test-netcore:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup dotnet 7.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          include-prerelease: true

      - name: Install dependencies
        run: dotnet restore

      - name: NavigatorAttractions.Service.Test - Unit Test
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: test/NavigatorAttractions.Service.Test
          report_name: NavigatorAttractions.Service.Test
          report_title: NavigatorAttractions.Service.Test - Unit Test
          fail_build_on_failed_tests: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: NavigatorAttractions.WebAPI.Test - Unit Test
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: test/NavigatorAttractions.WebAPI.Test
          report_name: NavigatorAttractions.WebAPI.Test
          report_title: NavigatorAttractions.WebAPI.Test - Unit Test
          fail_build_on_failed_tests: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: test-netcore

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Image Artifact
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ steps.date.outputs.date }}
          tags: |
            ${{ env.DOCKER_REPOSITORY_IMAGE}}:latest
            ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          file: ${{ env.DOCKER_FILE }}
          outputs: type=docker,dest=image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: image.tar

  publsh-dockerhub:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Load images
        run: |
          docker load --input docker-artifact/image.tar

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Hub
        run: |
          docker push ${{ env.DOCKER_REPOSITORY_IMAGE}} --all-tags

  publsh-googlecloud:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GH_ACTIONS_NAVIGATOR }}
          export_default_credentials: true

      - name: Google Cloud Artifacts/Authorize Docker push
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: Load images
        run: |
          docker load --input docker-artifact/image.tar

      - name: GCP Artifact Registry
        run: docker push ${{ env.GCP_DOCKER_IMAGE }} --all-tags

  deploy-googlecloud:
    runs-on: ubuntu-latest
    needs: publsh-googlecloud
    environment:
      name: prod
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GH_ACTIONS_NAVIGATOR }}
          export_default_credentials: true

      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GH_ACTIONS_NAVIGATOR  }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          service: ${{ env.SERVICE }}
          image: ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}}
          region: ${{ env.REGION }}
          env_vars: 'ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}'
          flags: '--memory 1Gi --port 5000 --allow-unauthenticated'
